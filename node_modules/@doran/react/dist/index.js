function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var React = require('react');
var React__default = _interopDefault(React);
var throttle = _interopDefault(require('lodash/throttle'));
var Grid = _interopDefault(require('@material-ui/core/Grid'));
var Typography = _interopDefault(require('@material-ui/core/Typography'));
var TextField = _interopDefault(require('@material-ui/core/TextField'));
var Autocomplete = _interopDefault(require('@material-ui/lab/Autocomplete'));
var CircularProgress = _interopDefault(require('@material-ui/core/CircularProgress'));
var styles$3 = require('@material-ui/core/styles');
var Button = _interopDefault(require('@material-ui/core/Button'));
var ButtonGroup = _interopDefault(require('@material-ui/core/ButtonGroup'));
var ExpandMoreIcon = _interopDefault(require('@material-ui/icons/ExpandMore'));
var ClickAwayListener = _interopDefault(require('@material-ui/core/ClickAwayListener'));
var Grow = _interopDefault(require('@material-ui/core/Grow'));
var Paper = _interopDefault(require('@material-ui/core/Paper'));
var Popper = _interopDefault(require('@material-ui/core/Popper'));
var Checkbox = _interopDefault(require('@material-ui/core/Checkbox'));
var FormControlLabel = _interopDefault(require('@material-ui/core/FormControlLabel'));
var PropTypes = _interopDefault(require('prop-types'));
var Alert = _interopDefault(require('@material-ui/lab/Alert'));
var FormControl = _interopDefault(require('@material-ui/core/FormControl'));
var InputLabel = _interopDefault(require('@material-ui/core/InputLabel'));
var OutlinedInput = _interopDefault(require('@material-ui/core/OutlinedInput'));
var Select = _interopDefault(require('@material-ui/core/Select'));
var IconButton = _interopDefault(require('@material-ui/core/IconButton'));
var MenuItem = _interopDefault(require('@material-ui/core/MenuItem'));
var DeleteForeverIcon = _interopDefault(require('@material-ui/icons/DeleteForever'));
var KeyboardArrowDownIcon = _interopDefault(require('@material-ui/icons/KeyboardArrowDown'));
var DatePicker = _interopDefault(require('react-datepicker2'));
var jalali = _interopDefault(require('jalali-moment'));
var Dialog = _interopDefault(require('@material-ui/core/Dialog'));
var DialogTitle = _interopDefault(require('@material-ui/core/DialogTitle'));
var DialogContent = _interopDefault(require('@material-ui/core/DialogContent'));
var DialogContentText = _interopDefault(require('@material-ui/core/DialogContentText'));
var DialogActions = _interopDefault(require('@material-ui/core/DialogActions'));
var SunEditor = require('suneditor-react');
var SunEditor__default = _interopDefault(SunEditor);
var ExpansionPanel = _interopDefault(require('@material-ui/core/ExpansionPanel'));
var ExpansionPanelDetails = _interopDefault(require('@material-ui/core/ExpansionPanelDetails'));
var ExpansionPanelSummary = _interopDefault(require('@material-ui/core/ExpansionPanelSummary'));
var ExpansionPanelActions = _interopDefault(require('@material-ui/core/ExpansionPanelActions'));
var Divider = _interopDefault(require('@material-ui/core/Divider'));
var AppBar = _interopDefault(require('@material-ui/core/AppBar'));
var Toolbar = _interopDefault(require('@material-ui/core/Toolbar'));
var Joi = _interopDefault(require('joi-browser'));
var MaskedInput = _interopDefault(require('react-text-mask'));
var FormHelperText = _interopDefault(require('@material-ui/core/FormHelperText'));
var ListItemText = _interopDefault(require('@material-ui/core/ListItemText'));
var Chip = _interopDefault(require('@material-ui/core/Chip'));
var Card = _interopDefault(require('@material-ui/core/Card'));
var CardMedia = _interopDefault(require('@material-ui/core/CardMedia'));
var CloudUploadIcon = _interopDefault(require('@material-ui/icons/CloudUpload'));
var Leaflet = _interopDefault(require('leaflet'));
var reactLeaflet = require('react-leaflet');
var Popover = _interopDefault(require('@material-ui/core/Popover'));
var Badge = _interopDefault(require('@material-ui/core/Badge'));
var Table = _interopDefault(require('@material-ui/core/Table'));
var TablePagination = _interopDefault(require('@material-ui/core/TablePagination'));
var TableFooter = _interopDefault(require('@material-ui/core/TableFooter'));
var TableRow = _interopDefault(require('@material-ui/core/TableRow'));
var FirstPageIcon = _interopDefault(require('@material-ui/icons/FirstPage'));
var LastPageIcon = _interopDefault(require('@material-ui/icons/LastPage'));
var KeyboardArrowLeft = _interopDefault(require('@material-ui/icons/KeyboardArrowLeft'));
var KeyboardArrowRight = _interopDefault(require('@material-ui/icons/KeyboardArrowRight'));
var TableCell = _interopDefault(require('@material-ui/core/TableCell'));
var TableHead = _interopDefault(require('@material-ui/core/TableHead'));
var lodash = _interopDefault(require('lodash'));
var TableBody = _interopDefault(require('@material-ui/core/TableBody'));
var clsx = _interopDefault(require('clsx'));
var CheckCircleIcon = _interopDefault(require('@material-ui/icons/CheckCircle'));
var ErrorIcon = _interopDefault(require('@material-ui/icons/Error'));
var InfoIcon = _interopDefault(require('@material-ui/icons/Info'));
var CloseIcon = _interopDefault(require('@material-ui/icons/Close'));
var colors = require('@material-ui/core/colors');
var Snackbar = _interopDefault(require('@material-ui/core/Snackbar'));
var SnackbarContent = _interopDefault(require('@material-ui/core/SnackbarContent'));
var WarningIcon = _interopDefault(require('@material-ui/icons/Warning'));
var Tooltip = _interopDefault(require('@material-ui/core/Tooltip'));
var TreeItem = _interopDefault(require('@material-ui/lab/TreeItem'));

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  subClass.__proto__ = superClass;
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

  return arr2;
}

function _createForOfIteratorHelperLoose(o, allowArrayLike) {
  var it;

  if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) {
    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
      if (it) o = it;
      var i = 0;
      return function () {
        if (i >= o.length) return {
          done: true
        };
        return {
          done: false,
          value: o[i++]
        };
      };
    }

    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  it = o[Symbol.iterator]();
  return it.next.bind(it);
}

var useStyles = styles$3.makeStyles(function () {
  return {
    input: {
      fontSize: "0.8rem"
    },
    optionLabel: {
      fontSize: "0.8rem",
      fontWeight: "bold"
    },
    optionSecondaryLabel: {
      fontSize: "0.7rem"
    }
  };
});
function DoranAutocomplete(props) {
  var classes = useStyles();
  var label = props.label,
      name = props.name,
      value = props.value,
      disabled = props.disabled,
      queryName = props.queryName;
  var serviceCallback = props.serviceCallback,
      convertCallback = props.convertCallback,
      onChangeCallback = props.onChangeCallback,
      defaultCallbackObject = props.defaultCallbackObject;

  var _React$useState = React__default.useState(null),
      inputValue = _React$useState[0],
      setInputValue = _React$useState[1];

  var _React$useState2 = React__default.useState([]),
      options = _React$useState2[0],
      setOptions = _React$useState2[1];

  var _React$useState3 = React__default.useState(false),
      loading = _React$useState3[0],
      setLoading = _React$useState3[1];

  var fetch = React__default.useMemo(function () {
    return throttle(function (_ref, callback) {
      var input = _ref.input;

      try {
        var _searchObject;

        var searchObject = (_searchObject = {}, _searchObject[queryName] = input, _searchObject);

        if (defaultCallbackObject) {
          var _Object$assign;

          searchObject = Object.assign(defaultCallbackObject, (_Object$assign = {}, _Object$assign[queryName] = input, _Object$assign));
        }

        return Promise.resolve(serviceCallback(searchObject)).then(function (data) {
          var items = convertCallback(data);
          callback(items);
        });
      } catch (e) {
        return Promise.reject(e);
      }
    }, 200);
  }, [queryName, convertCallback, serviceCallback, defaultCallbackObject]);
  React__default.useEffect(function () {
    var active = true;

    if (!inputValue) {
      setOptions([]);
      return;
    }

    fetch({
      input: inputValue
    }, function (results) {
      if (active) {
        setOptions(results || []);
      }
    });
    return function () {
      active = false;
    };
  }, [inputValue, fetch]);
  var autocompleteAttributes = {
    getOptionLabel: function getOptionLabel(option) {
      return option.label;
    },
    options: options,
    value: value,
    disableClearable: disabled,
    onChange: function onChange(event, newValue) {
      return onChangeCallback(event, name, newValue);
    },
    onOpen: function onOpen() {
      return setLoading(true);
    },
    onClose: function onClose() {
      return setLoading(false);
    }
  };
  var inputAttributes = {
    label: label,
    variant: "outlined",
    disabled: disabled,
    onChange: function onChange(event) {
      return setInputValue(event.target.value);
    }
  };
  return /*#__PURE__*/React__default.createElement(React__default.Fragment, null, /*#__PURE__*/React__default.createElement(Autocomplete, _extends({
    autoComplete: true,
    includeInputInList: true,
    freeSolo: true
  }, autocompleteAttributes, {
    renderInput: function renderInput(params) {
      return (
        /*#__PURE__*/
        React__default.createElement(TextField, _extends({}, inputAttributes, params, {
          fullWidth: true,
          InputLabelProps: {
            className: classes.input
          },
          InputProps: _extends({}, params.InputProps, {
            className: classes.input,
            endAdornment: /*#__PURE__*/React__default.createElement(React__default.Fragment, null, loading ? /*#__PURE__*/React__default.createElement(CircularProgress, {
              color: "inherit",
              size: 20
            }) : null, loading || params.InputProps.endAdornment)
          })
        }))
      );
    },
    renderOption: function renderOption(option) {
      var secondaryAttrs = {
        variant: "body2",
        color: "textSecondary",
        className: classes.optionSecondaryLabel
      };
      return /*#__PURE__*/React__default.createElement(Grid, {
        container: true,
        alignItems: "center"
      }, /*#__PURE__*/React__default.createElement(Grid, {
        item: true,
        xs: true
      }, /*#__PURE__*/React__default.createElement("span", {
        key: option.value,
        className: classes.optionLabel
      }, option.label), option.description && /*#__PURE__*/React__default.createElement(Typography, secondaryAttrs, option.description)));
    },
    filterOptions: function filterOptions(options, state) {
      options.forEach(function (option) {
        if (value && value.length) {
          var length = value.filter(function (e) {
            return e.value === option.value;
          }).length;

          if (length > 0) {
            option.disabled = true;
          }
        } else if (value && value.value === option.value) {
          option.disabled = true;
        }
      });
      return options.filter(function (e) {
        return !e.disabled;
      });
    }
  })));
}

var useStyles$1 = styles$3.makeStyles(function (theme) {
  return {
    root: {
      "& > * + *": {
        marginTop: theme.spacing(3)
      }
    },
    input: {
      fontSize: "0.9rem"
    }
  };
});
function DoranMultiSelectAutocomplete(props) {
  var classes = useStyles$1();
  var label = props.label,
      name = props.name,
      value = props.value,
      disabled = props.disabled,
      queryName = props.queryName;
  var serviceCallback = props.serviceCallback,
      convertCallback = props.convertCallback,
      onChangeCallback = props.onChangeCallback,
      defaultCallbackObject = props.defaultCallbackObject;

  var _React$useState = React__default.useState(null),
      inputValue = _React$useState[0],
      setInputValue = _React$useState[1];

  var _React$useState2 = React__default.useState(false),
      loading = _React$useState2[0],
      setLoading = _React$useState2[1];

  var _React$useState3 = React__default.useState([]),
      options = _React$useState3[0],
      setOptions = _React$useState3[1];

  var fetch = React__default.useMemo(function () {
    return throttle(function (_ref, callback) {
      var input = _ref.input;

      try {
        var _searchObject;

        var searchObject = (_searchObject = {}, _searchObject[queryName] = input, _searchObject);

        if (defaultCallbackObject) {
          var _Object$assign;

          searchObject = Object.assign(defaultCallbackObject, (_Object$assign = {}, _Object$assign[queryName] = input, _Object$assign));
        }

        return Promise.resolve(serviceCallback(searchObject)).then(function (data) {
          var items = convertCallback(data);
          callback(items);
        });
      } catch (e) {
        return Promise.reject(e);
      }
    }, 200);
  }, [queryName, serviceCallback, convertCallback, defaultCallbackObject]);
  React__default.useEffect(function () {
    var active = true;

    if (!inputValue) {
      setOptions([]);
      return;
    }

    fetch({
      input: inputValue
    }, function (results) {
      if (active) {
        var ids = value.map(function (e) {
          return e.value;
        });
        var items = results.filter(function (e) {
          return !ids.includes(e.value);
        });
        setOptions(items || []);
      }
    });
    return function () {
      active = false;
    };
  }, [value, inputValue, fetch]);
  var inputAttrs = {
    label: label,
    disabled: disabled
  };

  var renderInput = function renderInput(params) {
    return /*#__PURE__*/React__default.createElement(TextField, _extends({}, params, inputAttrs, {
      fullWidth: true,
      variant: "outlined",
      InputLabelProps: {
        className: classes.input
      },
      onChange: function onChange(event) {
        return setInputValue(event.target.value);
      },
      InputProps: _extends({}, params.InputProps, {
        className: classes.input,
        endAdornment: /*#__PURE__*/React__default.createElement(React__default.Fragment, null, loading ? /*#__PURE__*/React__default.createElement(CircularProgress, {
          color: "inherit",
          size: 20
        }) : null, loading || params.InputProps.endAdornment)
      })
    }));
  };

  var filterOptions = function filterOptions(options) {
    return options.filter(function (e) {
      return !e.disabled;
    });
  };

  return /*#__PURE__*/React__default.createElement("div", {
    className: classes.root
  }, /*#__PURE__*/React__default.createElement(Autocomplete, {
    multiple: true,
    freeSolo: true,
    value: value,
    options: options,
    getOptionLabel: function getOptionLabel(option) {
      return option.label;
    },
    filterSelectedOptions: true,
    renderInput: renderInput,
    filterOptions: filterOptions,
    onOpen: function onOpen() {
      return setLoading(true);
    },
    onClose: function onClose() {
      return setLoading(false);
    },
    onChange: function onChange(event, newValue) {
      return onChangeCallback(event, name, newValue);
    }
  }));
}

var useStyles$2 = styles$3.makeStyles({
  button: {
    textAlign: "right",
    marginTop: "16px"
  }
});
function DoranButton(props) {
  var label = props.label,
      _props$type = props.type,
      type = _props$type === void 0 ? "submit" : _props$type,
      rest = _objectWithoutPropertiesLoose(props, ["label", "type"]);

  var classes = useStyles$2();
  return /*#__PURE__*/React__default.createElement(Button, _extends({
    type: type,
    className: classes.button
  }, rest), label);
}

function DoranSplitButton(props) {
  var title = props.title,
      color = props.color,
      children = props.children;

  var _React$useState = React__default.useState(false),
      open = _React$useState[0],
      setOpen = _React$useState[1];

  var anchorRef = React__default.useRef(null);

  var handleToggle = function handleToggle() {
    setOpen(function (prevOpen) {
      return !prevOpen;
    });
  };

  var handleClose = function handleClose(event) {
    if (anchorRef.current && anchorRef.current.contains(event.target)) {
      return;
    }

    setOpen(false);
  };

  var arrowStyle = function arrowStyle(placement) {
    return {
      transformOrigin: placement === "bottom" ? "center top" : "center bottom"
    };
  };

  var containerAttrs = {
    direction: "column",
    alignItems: "center"
  };
  var buttonAttrs = {
    color: color,
    size: "small",
    "aria-controls": open ? "split-button-menu" : undefined,
    "aria-expanded": open ? "true" : undefined,
    "aria-haspopup": "menu",
    onClick: handleToggle
  };
  var menuAttrs = {
    open: open,
    anchorEl: anchorRef.current,
    role: undefined,
    style: {
      zIndex: 99
    }
  };
  return /*#__PURE__*/React__default.createElement(Grid, _extends({
    container: true
  }, containerAttrs), /*#__PURE__*/React__default.createElement(Grid, {
    item: true,
    xs: 12
  }, /*#__PURE__*/React__default.createElement(ButtonGroup, {
    variant: "contained",
    color: color,
    ref: anchorRef
  }, /*#__PURE__*/React__default.createElement(Button, null, title), /*#__PURE__*/React__default.createElement(Button, buttonAttrs, /*#__PURE__*/React__default.createElement(ExpandMoreIcon, null))), /*#__PURE__*/React__default.createElement(Popper, _extends({
    transition: true,
    disablePortal: true
  }, menuAttrs), function (_ref) {
    var TransitionProps = _ref.TransitionProps,
        placement = _ref.placement;
    return /*#__PURE__*/React__default.createElement(Grow, _extends({}, TransitionProps, {
      style: arrowStyle(placement)
    }), /*#__PURE__*/React__default.createElement(Paper, null, /*#__PURE__*/React__default.createElement(ClickAwayListener, {
      onClickAway: handleClose
    }, children)));
  })));
}

function CustomCheckbox(props) {
  var name = props.name,
      value = props.value,
      onChange = props.onChange,
      disabled = props.disabled;
  var attributes = {
    name: name,
    value: value,
    checked: value,
    onChange: onChange,
    disabled: disabled
  };
  return /*#__PURE__*/React__default.createElement(Checkbox, _extends({
    color: "primary"
  }, attributes));
}

var useStyles$3 = styles$3.makeStyles(function () {
  return {
    label: {
      fontSize: "0.9rem"
    }
  };
});
function DoranCheckbox(props) {
  var label = props.label,
      name = props.name,
      placement = props.placement,
      rest = _objectWithoutPropertiesLoose(props, ["label", "name", "placement", "error"]);

  var classes = useStyles$3();
  return /*#__PURE__*/React__default.createElement(FormControlLabel, {
    control: /*#__PURE__*/React__default.createElement(CustomCheckbox, _extends({
      name: name
    }, rest)),
    label: /*#__PURE__*/React__default.createElement(Typography, {
      className: classes.label
    }, label),
    labelPlacement: placement
  });
}

var CustomizedSelect = styles$3.withStyles({
  root: {
    padding: "10px 14px",
    height: "32px",
    fontSize: "0.8rem",
    lineHeight: "2.785em"
  }
})(Select);
var CustomizedMenuItem = styles$3.withStyles({
  root: {
    fontSize: "0.8rem"
  }
})(MenuItem);
var CustomizedOutlinedInput = styles$3.withStyles({
  root: {
    fontSize: "0.8rem"
  }
})(OutlinedInput);
var useStyles$4 = styles$3.makeStyles(function (theme) {
  return {
    root: {
      display: "flex",
      justifyContent: ""
    },
    select: {
      flexGrow: 1,
      marginRight: theme.spacing(0.5)
    },
    input: {
      flexGrow: 3
    },
    buttonLabel: {
      flexGrow: 0,
      alignSelf: "center"
    },
    button: {
      color: "red"
    },
    label: {
      fontSize: theme.spacing(1.6)
    }
  };
});
function DoranConatctInput(props) {
  var itemKey = props.itemKey,
      value = props.value,
      onChange = props.onChange,
      onRemove = props.onRemove;
  var selectName = props.selectName,
      selectLabel = props.selectLabel,
      options = props.options;
  var inputName = props.inputName,
      inputLabel = props.inputLabel;
  var classes = useStyles$4();
  var selectInputLabel = React__default.useRef(null);

  var _React$useState = React__default.useState(0),
      selectLabelWidth = _React$useState[0],
      setSelectLabelWidth = _React$useState[1];

  React__default.useEffect(function () {
    setSelectLabelWidth(selectInputLabel.current.offsetWidth);
  }, []);
  var inputInputLabel = React__default.useRef(null);

  var _React$useState2 = React__default.useState(0),
      inputLabelWidth = _React$useState2[0],
      setInputLabelWidth = _React$useState2[1];

  React__default.useEffect(function () {
    setInputLabelWidth(inputInputLabel.current.offsetWidth);
  }, []);

  var handleSelectChange = function handleSelectChange(event, child) {
    event.preventDefault();
    var item = child.props.value;
    var newValue = Object.assign(value, {
      type: options.find(function (e) {
        return e.value === item.value;
      })
    });
    onChange(itemKey, newValue);
  };

  var handleInputChange = function handleInputChange(event) {
    event.preventDefault();
    var newValue = Object.assign(value, {
      value: event.target.value
    });
    onChange(itemKey, newValue);
  };

  var selectAttributes = {
    renderValue: function renderValue(select) {
      return select.label;
    },
    value: value.type || "",
    labelWidth: selectLabelWidth,
    IconComponent: KeyboardArrowDownIcon,
    onChange: function onChange(event, child) {
      return handleSelectChange(event, child);
    }
  };
  var inputAttributes = {
    id: inputName,
    name: inputName,
    value: value.value || "",
    labelWidth: inputLabelWidth,
    onChange: function onChange(event) {
      return handleInputChange(event);
    }
  };
  return /*#__PURE__*/React__default.createElement("div", {
    className: classes.root
  }, /*#__PURE__*/React__default.createElement(FormControl, {
    variant: "outlined",
    className: classes.select
  }, /*#__PURE__*/React__default.createElement(InputLabel, {
    htmlFor: selectName,
    ref: selectInputLabel,
    className: classes.label
  }, selectLabel), /*#__PURE__*/React__default.createElement(CustomizedSelect, selectAttributes, options.map(function (option) {
    return /*#__PURE__*/React__default.createElement(CustomizedMenuItem, {
      key: option.value,
      value: option
    }, option.label);
  }))), /*#__PURE__*/React__default.createElement(FormControl, {
    variant: "outlined",
    className: classes.input
  }, /*#__PURE__*/React__default.createElement(InputLabel, {
    htmlFor: inputName,
    ref: inputInputLabel,
    className: classes.label
  }, inputLabel), /*#__PURE__*/React__default.createElement(CustomizedOutlinedInput, inputAttributes)), /*#__PURE__*/React__default.createElement("label", {
    className: classes.buttonLabel
  }, /*#__PURE__*/React__default.createElement(IconButton, {
    component: "span",
    className: classes.button,
    onClick: function onClick() {
      return onRemove(itemKey);
    }
  }, /*#__PURE__*/React__default.createElement(DeleteForeverIcon, null))));
}

var useStyles$5 = styles$3.makeStyles(function (theme) {
  return {
    section: {
      marginTop: theme.spacing(2)
    },
    titleBox: {
      margin: "auto 0"
    },
    titleLabel: {
      fontSize: "0.9rem"
    },
    addBox: {
      textAlign: "right"
    },
    addButton: {
      fontSize: "0.7rem",
      color: "green"
    },
    alert: {
      width: "100%",
      border: "1px solid lightgrey"
    }
  };
});
function DoranContact(props) {
  var classes = useStyles$5();
  var contactTypes = props.contactTypes,
      value = props.value,
      onChange = props.onChange;
  var title = props.title,
      addText = props.addText,
      inputLabelText = props.inputLabelText,
      selectLabelText = props.selectLabelText,
      emptyText = props.emptyText;

  var handleAdd = function handleAdd() {
    value.push({
      type: contactTypes[0],
      value: ""
    });
    onChange(value);
  };

  var handleRemove = function handleRemove(index) {
    value.splice(index, 1);
    onChange(value);
  };

  var handleChange = function handleChange(index, newValue) {
    value[index] = newValue;
    onChange(value);
  };

  var renderContactInput = function renderContactInput(index) {
    var attributes = {
      itemKey: index,
      value: value[index],
      selectName: "select-" + index,
      selectLabel: selectLabelText,
      options: contactTypes,
      inputName: "input-" + index,
      inputLabel: inputLabelText,
      onChange: handleChange,
      onRemove: handleRemove
    };
    return /*#__PURE__*/React__default.createElement(DoranConatctInput, attributes);
  };

  return /*#__PURE__*/React__default.createElement(Grid, {
    item: true,
    sm: 12
  }, /*#__PURE__*/React__default.createElement(Grid, {
    container: true,
    spacing: 1,
    className: classes.section
  }, /*#__PURE__*/React__default.createElement(Grid, {
    item: true,
    sm: 10,
    className: classes.titleBox
  }, /*#__PURE__*/React__default.createElement(Typography, {
    variant: "h6",
    className: classes.titleLabel
  }, title)), /*#__PURE__*/React__default.createElement(Grid, {
    item: true,
    sm: 2,
    className: classes.addBox
  }, /*#__PURE__*/React__default.createElement(Button, {
    size: "small",
    onClick: function onClick() {
      return handleAdd();
    },
    className: classes.addButton
  }, addText)), value.length > 0 && value.map(function (_, index) {
    return /*#__PURE__*/React__default.createElement(Grid, {
      item: true,
      sm: 12,
      key: index
    }, renderContactInput(index));
  }), !value.length && /*#__PURE__*/React__default.createElement(Alert, {
    severity: "info",
    className: classes.alert
  }, emptyText)));
}
DoranContact.propTypes = {
  contactTypes: PropTypes.array.isRequired,
  value: PropTypes.array.isRequired,
  onChange: PropTypes.func,
  title: PropTypes.string.isRequired,
  addText: PropTypes.string.isRequired,
  inputLabelText: PropTypes.string.isRequired,
  selectLabelText: PropTypes.string.isRequired,
  emptyText: PropTypes.string
};

var useStyles$6 = styles$3.makeStyles(function (theme) {
  return {
    label: {
      fontSize: "13px"
    },
    input: {
      fontSize: "13px",
      direction: "ltr",
      padding: "25px 14px",
      height: "1.2875em",
      width: "100%",
      borderRadius: "4px",
      boxSizing: "border-box",
      border: "1px solid lightgrey",
      "&:hover": {
        borderColor: "black"
      },
      "&:focus": {
        borderWidth: "2px",
        borderColor: "#3f51b5",
        outlineWidth: "0px"
      }
    }
  };
});

var DoranDatePicker = function DoranDatePicker(props) {
  var value = props.value,
      name = props.name,
      placeholder = props.placeholder,
      format = props.format,
      gregorian = props.gregorian,
      _onChange = props.onChange;
  var classes = useStyles$6();
  var attrs = {
    timePicker: false,
    isGregorian: gregorian,
    value: value ? jalali.from(value, format) : "",
    inputJalaaliFormat: "jYYYY-jMM-jDD",
    showTodayButton: false,
    className: classes.input,
    placeholder: placeholder,
    onChange: function onChange(changedValue) {
      if (value.toString() === changedValue.toString()) return;

      _onChange({
        currentTarget: {
          value: changedValue,
          name: name
        }
      });
    }
  };
  return /*#__PURE__*/React__default.createElement(FormControl, {
    fullWidth: true,
    variant: "outlined"
  }, /*#__PURE__*/React__default.createElement(DatePicker, attrs));
};

var CustomizedSelect$1 = styles$3.withStyles({
  root: {
    padding: "10px 14px",
    height: "32px",
    fontSize: "0.8rem",
    lineHeight: "2.785em"
  }
})(Select);
var CustomizedMenuItem$1 = styles$3.withStyles({
  root: {
    fontSize: "0.8rem"
  }
})(MenuItem);
var CustomizedOutlinedInput$1 = styles$3.withStyles({
  root: {
    fontSize: "0.8rem"
  }
})(OutlinedInput);
var useStyles$7 = styles$3.makeStyles(function (theme) {
  return {
    root: {
      display: "flex",
      justifyContent: ""
    },
    select: {
      flexGrow: 1,
      marginRight: theme.spacing(0.5)
    },
    input: {
      flexGrow: 3
    },
    buttonLabel: {
      flexGrow: 0,
      alignSelf: "center"
    },
    button: {
      color: "red"
    },
    label: {
      fontSize: theme.spacing(1.6)
    }
  };
});
function DoranBithDate(props) {
  var monthName = props.monthName,
      monthLabel = props.monthLabel,
      monthOptions = props.monthOptions;
  var dayName = props.dayName,
      dayLabel = props.dayLabel;
  var yearName = props.yearName,
      yearLabel = props.yearLabel;
  var classes = useStyles$7();
  var selectInputLabel = React__default.useRef(null);

  var _React$useState = React__default.useState(0),
      selectLabelWidth = _React$useState[0],
      setSelectLabelWidth = _React$useState[1];

  React__default.useEffect(function () {
    setSelectLabelWidth(selectInputLabel.current.offsetWidth);
  }, []);
  var inputInputLabel = React__default.useRef(null);

  var _React$useState2 = React__default.useState(0),
      inputLabelWidth = _React$useState2[0],
      setInputLabelWidth = _React$useState2[1];

  React__default.useEffect(function () {
    setInputLabelWidth(inputInputLabel.current.offsetWidth);
  }, []);

  var handleSelectChange = function handleSelectChange(event, child) {
    event.preventDefault();
    var item = child.props.value;
    var newValue = monthOptions.find(function (e) {
      return e.value === item.value;
    });
    console.log(newValue);
  };

  var handleDayChange = function handleDayChange(event) {
    event.preventDefault();
    console.log(event.target.value);
  };

  var handleYearChange = function handleYearChange(event) {
    event.preventDefault();
    console.log(event.target.value);
  };

  var selectAttributes = {
    renderValue: function renderValue(select) {
      return select.label;
    },
    labelWidth: selectLabelWidth,
    IconComponent: KeyboardArrowDownIcon,
    onChange: function onChange(event, child) {
      return handleSelectChange(event, child);
    }
  };
  var dayInputAttributes = {
    type: "number",
    inputProps: {
      min: 1,
      max: 31
    },
    id: dayName,
    name: dayName,
    labelWidth: inputLabelWidth,
    onChange: function onChange(event) {
      return handleDayChange(event);
    }
  };
  var yearInputAttributes = {
    type: "number",
    min: 1300,
    max: 1400,
    id: yearName,
    name: yearName,
    labelWidth: inputLabelWidth,
    onChange: function onChange(event) {
      return handleYearChange(event);
    }
  };
  console.log(dayInputAttributes);
  return /*#__PURE__*/React__default.createElement("div", {
    className: classes.root
  }, /*#__PURE__*/React__default.createElement(FormControl, {
    variant: "outlined",
    className: classes.input
  }, /*#__PURE__*/React__default.createElement(InputLabel, {
    htmlFor: dayName,
    ref: inputInputLabel,
    className: classes.label
  }, dayLabel), /*#__PURE__*/React__default.createElement(CustomizedOutlinedInput$1, dayInputAttributes)), /*#__PURE__*/React__default.createElement(FormControl, {
    variant: "outlined",
    className: classes.select
  }, /*#__PURE__*/React__default.createElement(InputLabel, {
    htmlFor: monthName,
    ref: selectInputLabel,
    className: classes.label
  }, monthLabel), /*#__PURE__*/React__default.createElement(CustomizedSelect$1, selectAttributes, monthOptions.map(function (option) {
    return /*#__PURE__*/React__default.createElement(CustomizedMenuItem$1, {
      key: option.value,
      value: option
    }, option.label);
  }))), /*#__PURE__*/React__default.createElement(FormControl, {
    variant: "outlined",
    className: classes.input
  }, /*#__PURE__*/React__default.createElement(InputLabel, {
    htmlFor: yearName,
    ref: inputInputLabel,
    className: classes.label
  }, yearLabel), /*#__PURE__*/React__default.createElement(CustomizedOutlinedInput$1, yearInputAttributes)));
}

var useStyles$8 = styles$3.makeStyles(function (theme) {
  return {
    title: {
      fontSize: theme.typography.pxToRem(16),
      margin: 0
    },
    content: {
      fontSize: theme.typography.pxToRem(13)
    },
    button: {
      fontSize: theme.typography.pxToRem(13)
    }
  };
});

function DoranConfirmDialog(props) {
  var classes = useStyles$8();
  var data = props.data,
      onClose = props.onClose,
      onDelete = props.onDelete;
  var title = props.title,
      content = props.content,
      agreeText = props.agreeText,
      disagreeText = props.disagreeText;

  var _React$useState = React__default.useState(props.open),
      open = _React$useState[0],
      setOpen = _React$useState[1];

  var handleClose = function handleClose() {
    setOpen(false);
    onClose();
  };

  return /*#__PURE__*/React__default.createElement("div", null, /*#__PURE__*/React__default.createElement(Dialog, {
    open: open,
    onClose: handleClose
  }, /*#__PURE__*/React__default.createElement(DialogTitle, {
    className: classes.title
  }, title), /*#__PURE__*/React__default.createElement(DialogContent, null, /*#__PURE__*/React__default.createElement(DialogContentText, {
    className: classes.content
  }, content)), /*#__PURE__*/React__default.createElement(DialogActions, null, /*#__PURE__*/React__default.createElement(Button, {
    onClick: handleClose,
    color: "primary",
    className: classes.button
  }, disagreeText), /*#__PURE__*/React__default.createElement(Button, {
    onClick: function onClick() {
      return onDelete(data);
    },
    color: "primary",
    className: classes.button
  }, agreeText))));
}

var useStyles$9 = styles$3.makeStyles(function (theme) {
  return {
    title: {
      fontSize: theme.typography.pxToRem(16),
      margin: 0
    },
    content: {
      fontSize: theme.typography.pxToRem(13)
    },
    button: {
      fontSize: theme.typography.pxToRem(12)
    }
  };
});

function DoranRemoveDialog(props) {
  var classes = useStyles$9();
  var titleText = props.titleText,
      contentText = props.contentText,
      disagreeText = props.disagreeText,
      agreeText = props.agreeText;
  var data = props.data,
      onClose = props.onClose,
      onDelete = props.onDelete;

  var _React$useState = React__default.useState(props.open),
      open = _React$useState[0],
      setOpen = _React$useState[1];

  var handleClose = function handleClose() {
    setOpen(false);
    onClose();
  };

  return /*#__PURE__*/React__default.createElement(Dialog, {
    open: open,
    onClose: handleClose
  }, /*#__PURE__*/React__default.createElement(DialogTitle, {
    disableTypography: false
  }, titleText), /*#__PURE__*/React__default.createElement(DialogContent, null, /*#__PURE__*/React__default.createElement(DialogContentText, {
    className: classes.content
  }, contentText)), /*#__PURE__*/React__default.createElement(DialogActions, null, /*#__PURE__*/React__default.createElement(Button, {
    onClick: handleClose,
    color: "primary",
    className: classes.button
  }, disagreeText), /*#__PURE__*/React__default.createElement(Button, {
    onClick: function onClick() {
      return onDelete(data);
    },
    color: "primary",
    className: classes.button
  }, agreeText)));
}

DoranEditor.propTypes = {
  name: PropTypes.string.isRequired,
  label: PropTypes.string.isRequired,
  value: PropTypes.string.isRequired,
  onChange: PropTypes.func
};
function DoranEditor(props) {
  var name = props.name,
      value = props.value,
      onChange = props.onChange;

  var handleChange = function handleChange(content) {
    onChange(name, content);
  };

  return (
    /*#__PURE__*/
    React__default.createElement(SunEditor__default, {
      setContents: value,
      onChange: handleChange,
      setDefaultStyle: "text-align: right",
      setOptions: {
        height: 500,
        buttonList: SunEditor.buttonList.complex
      }
    })
  );
}

var useStyles$a = styles$3.makeStyles(function (theme) {
  return {
    root: {
      width: "100%"
    },
    heading: {
      fontSize: theme.typography.pxToRem(13)
    },
    secondaryHeading: {
      fontSize: theme.typography.pxToRem(13),
      color: theme.palette.text.secondary
    },
    details: {
      flexGrow: 1
    },
    column: {
      flexBasis: "40%"
    }
  };
});
function DoranFilterPanel(props) {
  var classes = useStyles$a();
  var children = props.children,
      onFilter = props.onFilter,
      onReset = props.onReset;
  var titleText = props.titleText,
      descriptionText = props.descriptionText,
      clearText = props.clearText,
      filterText = props.filterText;
  return /*#__PURE__*/React__default.createElement("div", {
    className: classes.root
  }, /*#__PURE__*/React__default.createElement(ExpansionPanel, null, /*#__PURE__*/React__default.createElement(ExpansionPanelSummary, {
    expandIcon: /*#__PURE__*/React__default.createElement(ExpandMoreIcon, null)
  }, /*#__PURE__*/React__default.createElement("div", {
    className: classes.column
  }, /*#__PURE__*/React__default.createElement(Typography, {
    className: classes.heading
  }, titleText)), /*#__PURE__*/React__default.createElement("div", {
    className: classes.column
  }, /*#__PURE__*/React__default.createElement(Typography, {
    className: classes.secondaryHeading
  }, descriptionText))), /*#__PURE__*/React__default.createElement(ExpansionPanelDetails, {
    className: classes.details
  }, /*#__PURE__*/React__default.createElement("div", {
    className: classes.root
  }, /*#__PURE__*/React__default.createElement(Grid, {
    container: true,
    spacing: 1
  }, children))), /*#__PURE__*/React__default.createElement(Divider, null), /*#__PURE__*/React__default.createElement(ExpansionPanelActions, null, /*#__PURE__*/React__default.createElement(Button, {
    size: "small",
    onClick: function onClick() {
      return onReset();
    }
  }, clearText), /*#__PURE__*/React__default.createElement(Button, {
    size: "small",
    color: "primary",
    onClick: function onClick() {
      return onFilter();
    }
  }, filterText))));
}

var useStyles$b = styles$3.makeStyles(function (theme) {
  return {
    form: {
      display: "flex",
      flexDirection: "row"
    }
  };
});
function DoranOperationPanel(props) {
  var classes = useStyles$b();
  var children = props.children,
      header = props.header,
      footer = props.footer,
      _props$size = props.size,
      size = _props$size === void 0 ? 12 : _props$size,
      validate = props.validate;
  var onSave = props.onSave,
      saveText = props.saveText;

  var handleSubmit = function handleSubmit(event) {
    event.preventDefault();
  };

  return /*#__PURE__*/React__default.createElement(React__default.Fragment, null, header, /*#__PURE__*/React__default.createElement("form", {
    className: classes.form,
    autoComplete: "off",
    noValidate: true,
    onSubmit: handleSubmit
  }, /*#__PURE__*/React__default.createElement(Grid, {
    container: true,
    spacing: 1
  }, children, onSave && /*#__PURE__*/React__default.createElement(Grid, {
    item: true,
    sm: size
  }, /*#__PURE__*/React__default.createElement(Button, {
    type: "submit",
    variant: "contained",
    color: "primary",
    fullWidth: true,
    onClick: onSave,
    disabled: !!validate()
  }, saveText)), footer)));
}

var useStyles$c = styles$3.makeStyles(function (theme) {
  return {
    dialogTitle: {
      padding: 0
    },
    appBar: {
      position: "relative"
    },
    title: {
      marginLeft: theme.spacing(2),
      flex: 1
    },
    form: {
      display: "flex",
      flexDirection: "row"
    }
  };
});
function DoranOperationPanel$1(props) {
  var classes = useStyles$c();
  var children = props.children,
      open = props.open,
      _props$size = props.size,
      size = _props$size === void 0 ? "sm" : _props$size,
      validate = props.validate,
      onSave = props.onSave,
      onClose = props.onClose;
  var title = props.title,
      closeText = props.closeText,
      saveText = props.saveText;

  var handleSubmit = function handleSubmit(event) {
    event.preventDefault();
  };

  return /*#__PURE__*/React__default.createElement(Dialog, {
    fullWidth: true,
    maxWidth: size,
    open: open,
    onClose: onClose,
    "aria-labelledby": "dialog-title"
  }, /*#__PURE__*/React__default.createElement(DialogTitle, {
    id: "dialog-title",
    className: classes.dialogTitle
  }, /*#__PURE__*/React__default.createElement(AppBar, {
    className: classes.appBar
  }, /*#__PURE__*/React__default.createElement(Toolbar, null, /*#__PURE__*/React__default.createElement(Typography, {
    variant: "h6",
    className: classes.title
  }, title)))), /*#__PURE__*/React__default.createElement(DialogContent, {
    dividers: true
  }, /*#__PURE__*/React__default.createElement("form", {
    className: classes.form,
    autoComplete: "off",
    noValidate: true,
    onSubmit: handleSubmit
  }, /*#__PURE__*/React__default.createElement(Grid, {
    container: true,
    spacing: 1
  }, children))), /*#__PURE__*/React__default.createElement(DialogActions, null, /*#__PURE__*/React__default.createElement(Button, {
    color: "secondary",
    onClick: onClose
  }, closeText), onSave && /*#__PURE__*/React__default.createElement(Button, {
    type: "submit",
    variant: "contained",
    color: "primary",
    onClick: onSave,
    disabled: !!validate()
  }, saveText)));
}

var CustomizedOutlinedInput$2 = styles$3.withStyles({
  root: {
    fontSize: "0.9em"
  }
})(OutlinedInput);

function CustomMasked(_ref) {
  var inputRef = _ref.inputRef,
      other = _objectWithoutPropertiesLoose(_ref, ["inputRef"]);

  var mask = other.mask,
      placeholderChar = other.placeholderChar;
  return /*#__PURE__*/React__default.createElement(MaskedInput, _extends({}, other, {
    ref: function ref(_ref2) {
      inputRef(_ref2 ? _ref2.inputElement : null);
    },
    mask: mask,
    placeholderChar: placeholderChar,
    showMask: true
  }));
}

CustomMasked.propTypes = {
  inputRef: PropTypes.func.isRequired
};
var useStyles$d = styles$3.makeStyles(function (theme) {
  return {
    label: {
      fontSize: "0.9em"
    },
    error: {
      marginBottom: theme.spacing(2)
    }
  };
});
function DoranInput(props) {
  var label = props.label,
      name = props.name,
      _props$ltr = props.ltr,
      ltr = _props$ltr === void 0 ? false : _props$ltr,
      error = props.error,
      rest = _objectWithoutPropertiesLoose(props, ["label", "name", "ltr", "error"]);

  var classes = useStyles$d();
  var inputLabel = React__default.useRef(null);

  var _React$useState = React__default.useState(0),
      labelWidth = _React$useState[0],
      setLabelWidth = _React$useState[1];

  React__default.useEffect(function () {
    setLabelWidth(inputLabel.current.offsetWidth);
  }, []);
  var attributes = {
    id: name,
    name: name,
    error: !!error,
    style: ltr ? {
      direction: "ltr"
    } : null,
    "aria-describedby": name + "-helper",
    labelWidth: labelWidth
  };
  var helperAttrs = {
    className: attributes.error ? classes.error : null,
    id: attributes["aria-describedby"],
    error: attributes.error
  };
  var mask = rest.mask;

  function renderInput(mask) {
    if (mask) {
      return /*#__PURE__*/React__default.createElement(CustomizedOutlinedInput$2, _extends({}, attributes, rest, {
        inputComponent: CustomMasked,
        inputProps: {
          mask: mask
        }
      }));
    } else {
      return /*#__PURE__*/React__default.createElement(CustomizedOutlinedInput$2, _extends({}, attributes, rest));
    }
  }

  return /*#__PURE__*/React__default.createElement(FormControl, {
    fullWidth: true,
    variant: "outlined"
  }, /*#__PURE__*/React__default.createElement(InputLabel, {
    htmlFor: name,
    ref: inputLabel,
    className: classes.label
  }, label), renderInput(mask), error && /*#__PURE__*/React__default.createElement(FormHelperText, helperAttrs, error));
}
DoranInput.propTypes = {
  label: PropTypes.string.isRequired,
  name: PropTypes.string.isRequired
};

var CustomizedSelect$2 = styles$3.withStyles({
  root: {
    padding: "10px 14px",
    height: "32px"
  }
})(Select);
var CustomizedListItemText = styles$3.withStyles({
  root: {
    fontSize: "0.9rem"
  }
})(ListItemText);
var CustomizedMenuItem$2 = styles$3.withStyles({
  root: {
    padding: "0px"
  }
})(MenuItem);
var useStyles$e = styles$3.makeStyles(function () {
  return {
    label: {
      fontSize: "0.9rem"
    }
  };
});
function DoranMultiSelect(props) {
  var label = props.label,
      name = props.name,
      value = props.value,
      options = props.options,
      _onChange = props.onChange,
      error = props.error,
      rest = _objectWithoutPropertiesLoose(props, ["label", "name", "value", "options", "onChange", "error"]);

  var classes = useStyles$e();
  var inputLabel = React__default.useRef(null);

  var _React$useState = React__default.useState(0),
      labelWidth = _React$useState[0],
      setLabelWidth = _React$useState[1];

  React__default.useEffect(function () {
    setLabelWidth(inputLabel.current.offsetWidth);
  }, []);
  var attributes = {
    value: value,
    onChange: function onChange(event, child) {
      return _onChange(event, name, child.props.value);
    },
    renderValue: function renderValue(selects) {
      return /*#__PURE__*/React__default.createElement("div", {
        className: classes.chips
      }, selects.map(function (select) {
        return /*#__PURE__*/React__default.createElement(Chip, {
          key: select.value,
          label: select.label,
          className: classes.chip
        });
      }));
    },
    error: !!error,
    labelWidth: labelWidth,
    IconComponent: KeyboardArrowDownIcon
  };
  return /*#__PURE__*/React__default.createElement(FormControl, {
    fullWidth: true,
    variant: "outlined"
  }, /*#__PURE__*/React__default.createElement(InputLabel, {
    htmlFor: name,
    ref: inputLabel,
    className: classes.label
  }, label), /*#__PURE__*/React__default.createElement(CustomizedSelect$2, _extends({
    multiple: true
  }, attributes, rest), options.map(function (option) {
    return /*#__PURE__*/React__default.createElement(CustomizedMenuItem$2, {
      key: option.value,
      value: option
    }, /*#__PURE__*/React__default.createElement(Checkbox, {
      checked: value.indexOf(option) > -1
    }), /*#__PURE__*/React__default.createElement(CustomizedListItemText, {
      primary: option.label,
      disableTypography: true
    }));
  })), /*#__PURE__*/React__default.createElement(FormHelperText, {
    id: name + "-helper",
    error: attributes.error
  }, error));
}

var CustomizedSelect$3 = styles$3.withStyles({
  root: {
    fontSize: "0.9rem",
    lineHeight: "1.275em"
  }
})(Select);
var CustomizedListItemText$1 = styles$3.withStyles({
  root: {
    fontSize: "0.9rem"
  }
})(ListItemText);
var CustomizedMenuItem$3 = styles$3.withStyles({
  root: {
    padding: "0px"
  }
})(MenuItem);
var useStyles$f = styles$3.makeStyles(function () {
  return {
    label: {
      fontSize: "0.9rem"
    }
  };
});
function DoranMultiTagSelect(props) {
  var label = props.label,
      name = props.name,
      value = props.value,
      options = props.options,
      _onChange = props.onChange,
      error = props.error,
      rest = _objectWithoutPropertiesLoose(props, ["label", "name", "value", "options", "onChange", "error"]);

  var classes = useStyles$f();
  var inputLabel = React__default.useRef(null);

  var _React$useState = React__default.useState(0),
      labelWidth = _React$useState[0],
      setLabelWidth = _React$useState[1];

  React__default.useEffect(function () {
    setLabelWidth(inputLabel.current.offsetWidth);
  }, []);
  var attributes = {
    value: value,
    onChange: function onChange(event, child) {
      return _onChange(event, name, child.props.value);
    },
    renderValue: function renderValue(selecteds) {
      return selecteds.map(function (item) {
        return item.label;
      }).join("،");
    },
    error: !!error,
    labelWidth: labelWidth,
    IconComponent: KeyboardArrowDownIcon
  };
  return /*#__PURE__*/React__default.createElement(FormControl, {
    fullWidth: true,
    variant: "outlined"
  }, /*#__PURE__*/React__default.createElement(InputLabel, {
    htmlFor: name,
    ref: inputLabel,
    className: classes.label
  }, label), /*#__PURE__*/React__default.createElement(CustomizedSelect$3, _extends({
    multiple: true
  }, attributes, rest), options.map(function (option) {
    return /*#__PURE__*/React__default.createElement(CustomizedMenuItem$3, {
      key: option.value,
      value: option
    }, /*#__PURE__*/React__default.createElement(Checkbox, {
      checked: value.indexOf(option) > -1
    }), /*#__PURE__*/React__default.createElement(CustomizedListItemText$1, {
      primary: option.label,
      disableTypography: "true"
    }));
  })), attributes.error && /*#__PURE__*/React__default.createElement(FormHelperText, {
    id: name + "-helper",
    error: attributes.error
  }, error));
}

var CustomizedSelect$4 = styles$3.withStyles({
  root: {
    padding: "10px 14px",
    height: "32px",
    fontSize: "0.9rem",
    lineHeight: "2.785em"
  }
})(Select);
var CustomizedMenuItem$4 = styles$3.withStyles({
  root: {
    fontSize: "0.9rem"
  }
})(MenuItem);
var useStyles$g = styles$3.makeStyles(function () {
  return {
    label: {
      fontSize: "0.9rem"
    }
  };
});
function DoranSelect(props) {
  var label = props.label,
      name = props.name,
      value = props.value,
      options = props.options,
      _onChange = props.onChange,
      error = props.error,
      rest = _objectWithoutPropertiesLoose(props, ["label", "name", "value", "options", "onChange", "error"]);

  var classes = useStyles$g();
  var inputLabel = React__default.useRef(null);

  var _React$useState = React__default.useState(0),
      labelWidth = _React$useState[0],
      setLabelWidth = _React$useState[1];

  React__default.useEffect(function () {
    setLabelWidth(inputLabel.current.offsetWidth);
  }, []);
  var attributes = {
    renderValue: function renderValue(select) {
      return select.label;
    },
    value: value || "",
    onChange: function onChange(event, child) {
      return _onChange(event, name, child.props.value);
    },
    error: !!error,
    labelWidth: labelWidth,
    IconComponent: KeyboardArrowDownIcon
  };
  return /*#__PURE__*/React__default.createElement(FormControl, {
    fullWidth: true,
    variant: "outlined",
    className: classes.formControl
  }, /*#__PURE__*/React__default.createElement(InputLabel, {
    htmlFor: name,
    ref: inputLabel,
    className: classes.label
  }, label), /*#__PURE__*/React__default.createElement(CustomizedSelect$4, _extends({}, attributes, rest), options.map(function (option) {
    return /*#__PURE__*/React__default.createElement(CustomizedMenuItem$4, {
      key: option.value,
      value: option
    }, option.label);
  })), attributes.error && /*#__PURE__*/React__default.createElement(FormHelperText, {
    id: name + "-helper",
    error: attributes.error
  }, error));
}

function translateError(errors, prefix, translate) {
  var property = errors[0].context.label;
  errors.forEach(function (err) {
    return err.message = translate(prefix + "." + property + "." + err.type);
  });
  return errors;
}

var EventBus = /*#__PURE__*/function () {
  function EventBus() {
    this.bus = document.createElement("eventBusItem");
  }

  var _proto = EventBus.prototype;

  _proto.addEventListener = function addEventListener(event, callback) {
    this.bus.addEventListener(event, callback);
  };

  _proto.removeEventListener = function removeEventListener(event, callback) {
    this.bus.removeEventListener(event, callback);
  };

  _proto.dispatchEvent = function dispatchEvent(event, detail) {
    if (detail === void 0) {
      detail = {};
    }

    this.bus.dispatchEvent(new CustomEvent(event, {
      detail: detail
    }));
  };

  return EventBus;
}();

function toJalali(value, format) {
  var offset = jalali().utcOffset();
  var momentDate = jalali.utc(value).utcOffset(offset);

  if (value && momentDate.isValid()) {
    return momentDate.locale("fa").format(format ? format : "YYYY/M/D");
  }
}

function storeItem(key, object) {
  localStorage.setItem(key, object);
}
function retrieveItem(key) {
  return localStorage.getItem(key);
}
function removeItem(key) {
  return localStorage.removeItem(key);
}

function fileToBase64(file) {
  return new Promise(function (resolve) {
    var type = file.type,
        name = file.name;
    var extension = name.split(".").pop().toLowerCase();
    var fileReader = new FileReader();
    fileReader.readAsDataURL(file);

    fileReader.onload = function (file) {
      var base64 = file.target.result;
      var base = base64.replace(/^data:[/a-z0-9]+;base64,/, "");
      resolve({
        name: name,
        type: type,
        extension: extension,
        base: base,
        base64: base64
      });
    };
  });
}
function base64ToFile(data) {
  var name = data.name,
      type = data.type,
      base64 = data.base64;
  return new Promise(function (resolve) {
    fetch(base64).then(function (res) {
      return res.blob();
    }).then(function (blob) {
      resolve(new File([blob], name, {
        type: type
      }));
    });
  });
}
function urlToBase64(url) {
  return new Promise(function (resolve) {
    fetch(url).then(function (res) {
      return res.blob();
    }).then(function (blob) {
      var name = url.split("/").pop().toLowerCase();
      var extension = name.split(".").pop().toLowerCase();
      var fileReader = new FileReader();
      fileReader.readAsDataURL(blob);

      fileReader.onload = function (file) {
        var base64 = file.target.result;
        var base = base64.replace(/^data:[/a-z0-9]+;base64,/, "");
        resolve({
          name: name,
          type: blob.type,
          extension: extension,
          base: base,
          base64: base64
        });
      };
    });
  });
}
function urlToBase64Post(url, data) {
  return new Promise(function (resolve) {
    fetch(url, {
      method: "post",
      body: JSON.stringify(data),
      headers: {
        "Content-Type": "application/json"
      }
    }).then(function (res) {
      return res.blob();
    }).then(function (blob) {
      var name = url.split("/").pop().toLowerCase();
      var extension = name.split(".").pop().toLowerCase();
      var fileReader = new FileReader();
      fileReader.readAsDataURL(blob);

      fileReader.onload = function (file) {
        var base64 = file.target.result;
        var base = base64.replace(/^data:[/a-z0-9]+;base64,/, "");
        resolve({
          name: name,
          type: blob.type,
          extension: extension,
          base: base,
          base64: base64
        });
      };
    });
  });
}

var useStyles$h = styles$3.makeStyles(function (theme) {
  return {
    root: {
      height: "100%"
    },
    input: {
      display: "none"
    },
    card: {
      height: "calc(100% - 72px)",
      marginTop: theme.spacing(1)
    },
    media: {
      height: "100%",
      width: "100%"
    }
  };
});
function DoranImageInput(data) {
  var name = data.name,
      value = data.value,
      emptyImage = data.emptyImage,
      onChange = data.onChange,
      removeText = data.removeText,
      uploadText = data.uploadText,
      minHeight = data.minHeight;

  var _React$useState = React__default.useState(value),
      image = _React$useState[0],
      setImage = _React$useState[1];

  var classes = useStyles$h();

  var handleChange = function handleChange(_ref) {
    var target = _ref.target;

    try {
      var _temp2 = function () {
        if (target.files.length > 0) {
          return Promise.resolve(fileToBase64(target.files[0])).then(function (image) {
            setImage(image);
            onChange(name, image);
          });
        }
      }();

      return Promise.resolve(_temp2 && _temp2.then ? _temp2.then(function () {}) : void 0);
    } catch (e) {
      return Promise.reject(e);
    }
  };

  var handleRemove = function handleRemove() {
    setImage(null);
    onChange(name, null);
  };

  return /*#__PURE__*/React__default.createElement("div", {
    className: classes.root
  }, image ? /*#__PURE__*/React__default.createElement(Button, {
    variant: "contained",
    component: "span",
    fullWidth: true,
    color: "secondary",
    startIcon: /*#__PURE__*/React__default.createElement(DeleteForeverIcon, null),
    onClick: handleRemove
  }, removeText) : /*#__PURE__*/React__default.createElement(React__default.Fragment, null, /*#__PURE__*/React__default.createElement("input", {
    id: name,
    type: "file",
    accept: "image/*",
    className: classes.input,
    onChange: handleChange
  }), /*#__PURE__*/React__default.createElement("label", {
    htmlFor: name
  }, /*#__PURE__*/React__default.createElement(Button, {
    variant: "outlined",
    component: "span",
    fullWidth: true,
    startIcon: /*#__PURE__*/React__default.createElement(CloudUploadIcon, null)
  }, uploadText))), /*#__PURE__*/React__default.createElement(Card, {
    className: classes.card,
    style: {
      height: minHeight,
      minHeight: minHeight
    }
  }, value && value.base64 ? /*#__PURE__*/React__default.createElement(CardMedia, {
    className: classes.media,
    image: value.base64
  }) : /*#__PURE__*/React__default.createElement(CardMedia, {
    className: classes.media,
    image: emptyImage
  })));
}

delete Leaflet.Icon.Default.prototype._getIconUrl;
Leaflet.Icon.Default.mergeOptions({
  iconRetinaUrl: require("./leaflet/images/marker-icon-2x.png"),
  iconUrl: require("./leaflet/images/marker-icon.png"),
  shadowUrl: require("./leaflet/images/marker-shadow.png")
});
function DoranMap(props) {
  var name = props.name,
      zoom = props.zoom,
      center = props.center,
      ps = props.points,
      _props$single = props.single,
      single = _props$single === void 0 ? false : _props$single,
      onChange = props.onChange;

  var _useState = React.useState(ps),
      points = _useState[0],
      setPoints = _useState[1];

  var handleAddClick = function handleAddClick(event) {
    var _event$latlng = event.latlng,
        lat = _event$latlng.lat,
        lng = _event$latlng.lng;

    if (single) {
      setPoints([{
        lat: lat,
        lng: lng
      }]);
    } else {
      points.push({
        lat: lat,
        lng: lng
      });
    }

    onChange(name, points);
  };

  var handleRemoveClick = function handleRemoveClick(index) {
    points.splice(index, 1);
    onChange(name, points);
  };

  var style = {
    width: "100%",
    height: "100%",
    border: "1px solid rgba(0, 0, 0, 0.18)",
    borderRadius: "6px"
  };
  return /*#__PURE__*/React__default.createElement(reactLeaflet.Map, {
    center: center,
    zoom: zoom,
    style: style,
    onclick: handleAddClick
  }, /*#__PURE__*/React__default.createElement(reactLeaflet.TileLayer, {
    attribution: "&copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors",
    url: "https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png"
  }), points.map(function (item, index) {
    return /*#__PURE__*/React__default.createElement(reactLeaflet.Marker, {
      position: item,
      key: index,
      onClick: function onClick() {
        return handleRemoveClick(index);
      }
    });
  }));
}

var DoranForm = /*#__PURE__*/function (_Component) {
  _inheritsLoose(DoranForm, _Component);

  function DoranForm() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _Component.call.apply(_Component, [this].concat(args)) || this;
    _this.state = {
      data: {},
      errors: {},
      validate: false
    };

    _this.validate = function () {
      var options = {
        abortEarly: false
      };

      var _Joi$validate = Joi.validate(_this.state.data, _this.schema, options),
          error = _Joi$validate.error;

      if (!error) return null;
      var errors = {};

      for (var _iterator = _createForOfIteratorHelperLoose(error.details), _step; !(_step = _iterator()).done;) {
        var item = _step.value;
        errors[item.path[0]] = item.message;
      }

      return errors;
    };

    _this.validateProperty = function (_ref) {
      var _obj, _schema;

      var name = _ref.name,
          value = _ref.value;
      var obj = (_obj = {}, _obj[name] = value, _obj);
      var schema = (_schema = {}, _schema[name] = _this.schema[name], _schema);

      var _Joi$validate2 = Joi.validate(obj, schema),
          error = _Joi$validate2.error;

      return error ? error.details[0].message : null;
    };

    _this.handleTextChange = function (_ref2) {
      var input = _ref2.currentTarget;

      var errors = _extends({}, _this.state.errors);

      if (_this.state.validate) {
        var errorMessage = _this.validateProperty(input);

        if (errorMessage) errors[input.name] = errorMessage;else delete errors[input.name];
      }

      var data = _extends({}, _this.state.data);

      data[input.name] = input.value;

      _this.setState({
        data: data,
        errors: errors
      });
    };

    _this.handleEditorChange = function (name, value) {
      var errors = _extends({}, _this.state.errors);

      if (_this.state.validate) {
        var errorMessage = _this.validateProperty({
          name: name,
          value: value
        });

        if (errorMessage) errors[name] = errorMessage;else delete errors[name];
      }

      var data = _extends({}, _this.state.data);

      data[name] = value;

      _this.setState({
        data: data,
        errors: errors
      });
    };

    _this.handleMapChange = function (name, points) {
      var errors = _extends({}, _this.state.errors);

      if (_this.state.validate) {
        var errorMessage = _this.validateProperty({
          name: name,
          value: points
        });

        if (errorMessage) errors[name] = errorMessage;else delete errors[name];
      }

      var data = _extends({}, _this.state.data);

      data[name] = points;

      _this.setState({
        data: data,
        errors: errors
      });
    };

    _this.handleCheckboxChange = function (_ref3) {
      var input = _ref3.currentTarget;

      var errors = _extends({}, _this.state.errors);

      if (_this.state.validate) {
        var errorMessage = _this.validateProperty(input);

        if (errorMessage) errors[input.name] = errorMessage;else delete errors[input.name];
      }

      var data = _extends({}, _this.state.data);

      data[input.name] = input.checked;

      _this.setState({
        data: data,
        errors: errors
      });
    };

    _this.handleMultiSelectChange = function (event, name, value) {
      var errors = _extends({}, _this.state.errors);

      if (_this.state.validate) {
        var errorMessage = _this.validateProperty({
          name: name,
          value: [value]
        });

        if (errorMessage) errors[name] = errorMessage;else delete errors[name];
      }

      var data = _extends({}, _this.state.data);

      var index = data[name].indexOf(value);

      if (index === -1) {
        data[name].splice(data[name].length - 1, 0, value);
      } else {
        data[name].splice(index, 1);
      }

      _this.setState({
        data: data,
        errors: errors
      });
    };

    _this.handleSelectChange = function (event, name, value) {
      var errors = _extends({}, _this.state.errors);

      if (_this.state.validate) {
        var errorMessage = _this.validateProperty({
          name: name,
          value: value
        });

        if (errorMessage) errors[name] = errorMessage;else delete errors[name];
      }

      var data = _extends({}, _this.state.data);

      data[name] = value;

      _this.setState({
        data: data,
        errors: errors
      });
    };

    _this.handleBirthDateChange = function (name, value) {
      var errors = _extends({}, _this.state.errors);

      if (_this.state.validate) {
        var errorMessage = _this.validateProperty({
          name: name,
          value: value
        });

        if (errorMessage) errors[name] = errorMessage;else delete errors[name];
      }

      var data = _extends({}, _this.state.data);

      data[name] = value;

      _this.setState({
        data: data,
        errors: errors
      });
    };

    _this.handleAutoCompleteChange = function (event, name, value, onChange) {
      var errors = _extends({}, _this.state.errors);

      if (_this.state.validate) {
        var errorMessage = _this.validateProperty({
          name: name,
          value: value
        });

        if (errorMessage) errors[name] = errorMessage;else delete errors[name];
      }

      var data = _extends({}, _this.state.data);

      data[name] = value;

      _this.setState({
        data: data,
        errors: errors
      });

      if (onChange) onChange(value);
    };

    _this.handleMultiSelectAutoCompleteChange = function (_, name, value, onChange) {
      var errors = _extends({}, _this.state.errors);

      if (_this.state.validate) {
        var errorMessage = _this.validateProperty({
          name: name,
          value: value
        });

        if (errorMessage) errors[name] = errorMessage;else delete errors[name];
      }

      var data = _extends({}, _this.state.data);

      data[name] = value;

      _this.setState({
        data: data,
        errors: errors
      });

      if (onChange) onChange(value);
    };

    _this.handleImageChange = function (name, value) {
      var errors = _extends({}, _this.state.errors);

      if (_this.state.validate) {
        var errorMessage = _this.validateProperty({
          name: name,
          value: value
        });

        if (errorMessage) errors[name] = errorMessage;else delete errors[name];
      }

      var data = _extends({}, _this.state.data);

      data[name] = value;

      _this.setState({
        data: data,
        errors: errors
      });
    };

    return _this;
  }

  var _proto = DoranForm.prototype;

  _proto.renderSelect = function renderSelect(attr) {
    var name = attr.name,
        label = attr.label,
        options = attr.options,
        _attr$disabled = attr.disabled,
        disabled = _attr$disabled === void 0 ? false : _attr$disabled;
    var _this$state = this.state,
        data = _this$state.data,
        errors = _this$state.errors;
    var attributes = {
      name: name,
      value: data[name],
      label: label,
      options: options,
      onChange: this.handleSelectChange,
      disabled: disabled
    };

    if (this.state.validate) {
      attributes.error = errors[name];
    }

    return /*#__PURE__*/React__default.createElement(DoranSelect, attributes);
  };

  _proto.renderMultiSelect = function renderMultiSelect(info) {
    var _this$state2 = this.state,
        data = _this$state2.data,
        errors = _this$state2.errors;
    var label = info.label,
        name = info.name,
        options = info.options;
    var attributes = {
      name: name,
      value: data[name],
      label: label,
      options: options,
      onChange: this.handleMultiSelectChange
    };

    if (this.state.validate) {
      attributes.error = errors[name];
    }

    return /*#__PURE__*/React__default.createElement(DoranMultiSelect, attributes);
  };

  _proto.renderMultiTagSelect = function renderMultiTagSelect(label, name, options) {
    var _this$state3 = this.state,
        data = _this$state3.data,
        errors = _this$state3.errors;
    var attributes = {
      name: name,
      value: data[name],
      label: label,
      options: options,
      onChange: this.handleMultiSelectChange
    };

    if (this.state.validate) {
      attributes.error = errors[name];
    }

    return /*#__PURE__*/React__default.createElement(DoranMultiTagSelect, attributes);
  };

  _proto.renderAutocomplete = function renderAutocomplete(props) {
    var _this2 = this;

    var label = props.label,
        name = props.name,
        queryName = props.queryName,
        _props$disabled = props.disabled,
        disabled = _props$disabled === void 0 ? false : _props$disabled;
    var serviceCallback = props.serviceCallback,
        convertCallback = props.convertCallback,
        _onChangeCallback = props.onChangeCallback,
        defaultCallbackObject = props.defaultCallbackObject;
    var _this$state4 = this.state,
        data = _this$state4.data,
        errors = _this$state4.errors;
    var attributes = {
      label: label,
      name: name,
      value: data[name],
      queryName: queryName,
      serviceCallback: serviceCallback,
      convertCallback: convertCallback,
      defaultCallbackObject: defaultCallbackObject,
      onChangeCallback: function onChangeCallback(event, name, value) {
        return _this2.handleAutoCompleteChange(event, name, value, _onChangeCallback);
      },
      disabled: disabled
    };

    if (this.state.validate) {
      attributes.error = errors[name];
    }

    return /*#__PURE__*/React__default.createElement(DoranAutocomplete, attributes);
  };

  _proto.renderMultiSelectAutocomplete = function renderMultiSelectAutocomplete(props) {
    var _this3 = this;

    var label = props.label,
        name = props.name,
        queryName = props.queryName,
        _props$disabled2 = props.disabled,
        disabled = _props$disabled2 === void 0 ? false : _props$disabled2;
    var serviceCallback = props.serviceCallback,
        convertCallback = props.convertCallback,
        _onChangeCallback2 = props.onChangeCallback,
        defaultCallbackObject = props.defaultCallbackObject;
    var _this$state5 = this.state,
        data = _this$state5.data,
        errors = _this$state5.errors;
    var attributes = {
      label: label,
      name: name,
      value: data[name],
      queryName: queryName,
      serviceCallback: serviceCallback,
      convertCallback: convertCallback,
      defaultCallbackObject: defaultCallbackObject,
      onChangeCallback: function onChangeCallback(event, name, value) {
        return _this3.handleAutoCompleteChange(event, name, value, _onChangeCallback2);
      },
      disabled: disabled
    };

    if (this.state.validate) {
      attributes.error = errors[name];
    }

    return /*#__PURE__*/React__default.createElement(DoranMultiSelectAutocomplete, attributes);
  };

  _proto.renderContact = function renderContact(attrs) {
    var _this4 = this;

    var name = attrs.name,
        title = attrs.title,
        addText = attrs.addText,
        inputLabelText = attrs.inputLabelText,
        selectLabelText = attrs.selectLabelText,
        emptyText = attrs.emptyText;
    var contactTypes = attrs.contactTypes;
    var data = this.state.data;
    var attributes = {
      name: name,
      contactTypes: contactTypes,
      value: data[name],
      title: title,
      addText: addText,
      inputLabelText: inputLabelText,
      selectLabelText: selectLabelText,
      emptyText: emptyText,
      onChange: function onChange(value) {
        return _this4.handleContactChange(name, value);
      }
    };
    return /*#__PURE__*/React__default.createElement(DoranContact, attributes);
  };

  _proto.renderBirthDate = function renderBirthDate(attrs) {
    var _this5 = this;

    var name = attrs.name,
        dayName = attrs.dayName,
        dayLabel = attrs.dayLabel;
    var monthName = attrs.monthName,
        monthLabel = attrs.monthLabel,
        monthOptions = attrs.monthOptions;
    var yearName = attrs.yearName,
        yearLabel = attrs.yearLabel;
    var data = this.state.data;
    var attributes = {
      name: name,
      dayName: dayName,
      dayLabel: dayLabel,
      monthName: monthName,
      monthLabel: monthLabel,
      monthOptions: monthOptions,
      yearName: yearName,
      yearLabel: yearLabel,
      value: data[name],
      onChange: function onChange(value) {
        return _this5.handleBirthDateChange(name, value);
      }
    };
    return /*#__PURE__*/React__default.createElement(DoranBithDate, attributes);
  };

  _proto.renderInput = function renderInput(attr) {
    var name = attr.name,
        label = attr.label,
        mask = attr.mask,
        _attr$ltr = attr.ltr,
        ltr = _attr$ltr === void 0 ? false : _attr$ltr,
        _attr$type = attr.type,
        type = _attr$type === void 0 ? "text" : _attr$type;
    var _this$state6 = this.state,
        data = _this$state6.data,
        errors = _this$state6.errors;
    var attributes = {
      name: name,
      type: type,
      value: data[name],
      label: label,
      ltr: ltr,
      onChange: this.handleTextChange,
      mask: mask
    };

    if (this.state.validate) {
      attributes.error = errors[name];
    }

    return /*#__PURE__*/React__default.createElement(DoranInput, attributes);
  };

  _proto.renderCheckbox = function renderCheckbox(attr) {
    var name = attr.name,
        label = attr.label,
        _attr$placement = attr.placement,
        placement = _attr$placement === void 0 ? "end" : _attr$placement;
    var _this$state7 = this.state,
        data = _this$state7.data,
        errors = _this$state7.errors;
    var attributes = {
      name: name,
      value: data[name],
      label: label,
      placement: placement,
      onChange: this.handleCheckboxChange
    };

    if (this.state.validate) {
      attributes.error = errors[name];
    }

    return /*#__PURE__*/React__default.createElement(DoranCheckbox, attributes);
  };

  _proto.renderTextArea = function renderTextArea(attr) {
    var name = attr.name,
        label = attr.label,
        _attr$ltr2 = attr.ltr,
        ltr = _attr$ltr2 === void 0 ? false : _attr$ltr2,
        _attr$rows = attr.rows,
        rows = _attr$rows === void 0 ? 5 : _attr$rows;
    var _this$state8 = this.state,
        data = _this$state8.data,
        errors = _this$state8.errors;
    var attributes = {
      type: "text",
      multiline: true,
      name: name,
      value: data[name],
      label: label,
      ltr: ltr,
      rows: rows,
      onChange: this.handleTextChange
    };

    if (this.state.validate) {
      attributes.error = errors[name];
    }

    return /*#__PURE__*/React__default.createElement(DoranInput, attributes);
  };

  _proto.renderImageInput = function renderImageInput(attr) {
    var _this6 = this;

    var name = attr.name,
        emptyImage = attr.emptyImage,
        removeText = attr.removeText,
        uploadText = attr.uploadText,
        minHeight = attr.minHeight;
    var _this$state9 = this.state,
        data = _this$state9.data,
        errors = _this$state9.errors;
    var attributes = {
      name: name,
      value: data[name],
      emptyImage: emptyImage,
      removeText: removeText,
      uploadText: uploadText,
      minHeight: minHeight,
      onChange: function onChange(name, value) {
        return _this6.handleImageChange(name, value);
      }
    };

    if (this.state.validate) {
      attributes.error = errors[name];
    }

    return /*#__PURE__*/React__default.createElement(DoranImageInput, attributes);
  };

  _proto.renderDatePicker = function renderDatePicker(attr) {
    var name = attr.name,
        label = attr.label,
        _attr$gregorian = attr.gregorian,
        gregorian = _attr$gregorian === void 0 ? false : _attr$gregorian,
        placeholder = attr.placeholder,
        _attr$format = attr.format,
        format = _attr$format === void 0 ? "jYYYY-jMM-jDD" : _attr$format;
    var _this$state10 = this.state,
        data = _this$state10.data,
        errors = _this$state10.errors;
    var attributes = {
      name: name,
      value: data[name],
      label: label,
      gregorian: gregorian,
      placeholder: placeholder,
      format: format,
      onChange: this.handleTextChange
    };

    if (this.state.validate) {
      attributes.error = errors[name];
    }

    return /*#__PURE__*/React__default.createElement(DoranDatePicker, attributes);
  };

  _proto.renderButton = function renderButton(attr) {
    var label = attr.label,
        _attr$type2 = attr.type,
        type = _attr$type2 === void 0 ? "submit" : _attr$type2;
    var attributes = {
      type: type,
      label: label,
      variant: "contained",
      color: "primary",
      size: "large",
      disabled: this.validate() ? true : false
    };
    return /*#__PURE__*/React__default.createElement(DoranButton, _extends({
      fullWidth: true
    }, attributes));
  };

  _proto.renderMap = function renderMap(attrs) {
    var _this7 = this;

    var name = attrs.name,
        center = attrs.center,
        zoom = attrs.zoom,
        single = attrs.single;
    var data = this.state.data;
    var attributes = {
      name: name,
      center: center,
      zoom: zoom,
      single: single,
      points: data[name],
      onChange: function onChange(name, value) {
        return _this7.handleMapChange(name, value);
      }
    };
    return /*#__PURE__*/React__default.createElement(DoranMap, attributes);
  };

  _proto.renderEditor = function renderEditor(attrs) {
    var _this8 = this;

    var name = attrs.name,
        label = attrs.label;
    var data = this.state.data;
    var attributes = {
      name: name,
      label: label,
      value: data[name],
      onChange: function onChange(name, value) {
        return _this8.handleEditorChange(name, value);
      }
    };
    return /*#__PURE__*/React__default.createElement(DoranEditor, attributes);
  };

  return DoranForm;
}(React.Component);

function DoranPopover(props) {
  var _React$useState = React__default.useState(null),
      anchorEl = _React$useState[0],
      setAnchorEl = _React$useState[1];

  var children = props.children,
      iconStyle = props.iconStyle,
      Icon = props.Icon;

  var handleClick = function handleClick(event) {
    setAnchorEl(event.currentTarget);
  };

  var handleClose = function handleClose() {
    setAnchorEl(null);
  };

  var open = Boolean(anchorEl);
  var attributes = {
    open: open,
    anchorEl: anchorEl,
    onClose: handleClose,
    anchorOrigin: {
      vertical: "bottom",
      horizontal: "center"
    },
    transformOrigin: {
      vertical: "top",
      horizontal: "center"
    }
  };
  return /*#__PURE__*/React__default.createElement(React__default.Fragment, null, /*#__PURE__*/React__default.createElement(Badge, {
    onClick: handleClick
  }, /*#__PURE__*/React__default.createElement(Icon, {
    style: iconStyle
  })), /*#__PURE__*/React__default.createElement(Popover, attributes, /*#__PURE__*/React__default.createElement(Typography, {
    component: "div"
  }, children)));
}

var styles = styles$3.makeStyles(function (theme) {
  return {
    root: {
      flexShrink: 0,
      marginLeft: theme.spacing(2.5)
    }
  };
});
function DoranPaginationActions(props) {
  var classes = styles();
  var count = props.count,
      page = props.page,
      rowsPerPage = props.rowsPerPage,
      onChangePage = props.onChangePage;

  var handleFirstPageButtonClick = function handleFirstPageButtonClick(event) {
    onChangePage(event, 0);
  };

  var handleBackButtonClick = function handleBackButtonClick(event) {
    onChangePage(event, page - 1);
  };

  var handleNextButtonClick = function handleNextButtonClick(event) {
    onChangePage(event, page + 1);
  };

  var handleLastPageButtonClick = function handleLastPageButtonClick(event) {
    onChangePage(event, Math.max(0, Math.ceil(count / rowsPerPage) - 1));
  };

  return /*#__PURE__*/React__default.createElement("div", {
    className: classes.root
  }, /*#__PURE__*/React__default.createElement(IconButton, {
    onClick: handleFirstPageButtonClick,
    disabled: page === 0
  }, /*#__PURE__*/React__default.createElement(LastPageIcon, null)), /*#__PURE__*/React__default.createElement(IconButton, {
    onClick: handleBackButtonClick,
    disabled: page === 0
  }, /*#__PURE__*/React__default.createElement(KeyboardArrowRight, null)), /*#__PURE__*/React__default.createElement(IconButton, {
    onClick: handleNextButtonClick,
    disabled: page >= Math.ceil(count / rowsPerPage) - 1
  }, /*#__PURE__*/React__default.createElement(KeyboardArrowLeft, null)), /*#__PURE__*/React__default.createElement(IconButton, {
    onClick: handleLastPageButtonClick,
    disabled: page >= Math.ceil(count / rowsPerPage) - 1
  }, /*#__PURE__*/React__default.createElement(FirstPageIcon, null)));
}
DoranPaginationActions.propTypes = {
  count: PropTypes.number.isRequired,
  page: PropTypes.number.isRequired,
  rowsPerPage: PropTypes.number.isRequired,
  onChangePage: PropTypes.func.isRequired
};

var rowsPerPageOptions = [10, 20, 30, 40, 50];
function DoranPagination(props) {
  var colSpan = props.colSpan,
      totalCount = props.totalCount,
      pageSize = props.pageSize,
      pageNumber = props.pageNumber,
      _props$pageSizeSelect = props.pageSizeSelectable,
      pageSizeSelectable = _props$pageSizeSelect === void 0 ? false : _props$pageSizeSelect;
  var onChangePageClick = props.onChangePageClick,
      onChangeRowsPerPageClick = props.onChangeRowsPerPageClick;
  var rowsPerPageLabel = props.rowsPerPageLabel,
      displayedRowsFormatter = props.displayedRowsFormatter;
  return /*#__PURE__*/React__default.createElement(TableFooter, null, /*#__PURE__*/React__default.createElement(TableRow, null, /*#__PURE__*/React__default.createElement(TablePagination, {
    rowsPerPageOptions: pageSizeSelectable ? rowsPerPageOptions : [],
    rowsPerPage: pageSize,
    count: totalCount,
    page: pageNumber - 1,
    colSpan: colSpan,
    onChangePage: onChangePageClick,
    onChangeRowsPerPage: onChangeRowsPerPageClick,
    labelRowsPerPage: rowsPerPageLabel,
    labelDisplayedRows: displayedRowsFormatter,
    ActionsComponent: DoranPaginationActions
  })));
}

var styles$1 = styles$3.makeStyles({
  th: {
    fontSize: "0.95rem",
    fontWeight: "bold",
    whiteSpace: "nowrap"
  }
});
function DoranHeader(props) {
  var classes = styles$1();
  var columns = props.columns;
  return /*#__PURE__*/React__default.createElement(TableHead, null, /*#__PURE__*/React__default.createElement(TableRow, null, columns.map(function (column) {
    return /*#__PURE__*/React__default.createElement(TableCell, {
      key: column.key,
      className: classes.th,
      style: {
        width: column.width
      }
    }, column.label);
  })));
}

var CustomizedTableCell = styles$3.styled(TableCell)({
  fontSize: "14px"
});

var DoranBody = /*#__PURE__*/function (_Component) {
  _inheritsLoose(DoranBody, _Component);

  function DoranBody() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _Component.call.apply(_Component, [this].concat(args)) || this;

    _this.renderCell = function (item, column, rowIndex) {
      if (column.content) return column.content(item, rowIndex);
      return lodash.get(item, column.path);
    };

    _this.createKey = function (item, column, key) {
      return item[key] + (column.path || column.key);
    };

    return _this;
  }

  var _proto = DoranBody.prototype;

  _proto.render = function render() {
    var _this2 = this;

    var _this$props = this.props,
        items = _this$props.items,
        columns = _this$props.columns,
        _this$props$keys = _this$props.keys,
        keys = _this$props$keys === void 0 ? "id" : _this$props$keys;
    return /*#__PURE__*/React__default.createElement(TableBody, null, items.map(function (item, index) {
      return /*#__PURE__*/React__default.createElement(TableRow, {
        key: item[keys]
      }, columns.map(function (column) {
        return /*#__PURE__*/React__default.createElement(CustomizedTableCell, {
          key: _this2.createKey(item, column)
        }, _this2.renderCell(item, column, index));
      }));
    }));
  };

  return DoranBody;
}(React.Component);

var styles$2 = styles$3.makeStyles(function (theme) {
  return {
    root: {
      width: "100%",
      marginTop: theme.spacing(3)
    },
    table: {
      minWidth: 500
    },
    tableWrapper: {
      overflowX: "auto"
    }
  };
});
function DoranPaginationTable(props) {
  var classes = styles$2();
  var columns = props.columns,
      items = props.items,
      total = props.total,
      pageNumber = props.pageNumber,
      pageSize = props.pageSize,
      pageSizeSelectable = props.pageSizeSelectable,
      keys = props.keys,
      _props$showPagination = props.showPagination,
      showPagination = _props$showPagination === void 0 ? true : _props$showPagination;
  var onPageSizeChange = props.onPageSizeChange,
      onPageNumberChange = props.onPageNumberChange;
  var rowsPerPageLabel = props.rowsPerPageLabel,
      displayedRowsFormatter = props.displayedRowsFormatter;
  return /*#__PURE__*/React__default.createElement(Paper, {
    className: classes.root
  }, /*#__PURE__*/React__default.createElement("div", {
    className: classes.tableWrapper
  }, /*#__PURE__*/React__default.createElement(Table, {
    className: classes.table,
    size: "small"
  }, /*#__PURE__*/React__default.createElement(DoranHeader, {
    columns: columns
  }), /*#__PURE__*/React__default.createElement(DoranBody, {
    items: items,
    columns: columns,
    keys: keys
  }), showPagination && /*#__PURE__*/React__default.createElement(DoranPagination, {
    colSpan: columns.length,
    totalCount: total,
    pageSizeSelectable: pageSizeSelectable,
    pageSize: pageSize,
    pageNumber: pageNumber,
    displayedRowsFormatter: displayedRowsFormatter,
    rowsPerPageLabel: rowsPerPageLabel,
    onChangePageClick: function onChangePageClick(event, newPage) {
      return onPageNumberChange(newPage);
    },
    onChangeRowsPerPageClick: function onChangeRowsPerPageClick(event) {
      return onPageSizeChange(parseInt(event.target.value, 10));
    }
  }))));
}

var variantIcon = {
  success: CheckCircleIcon,
  warning: WarningIcon,
  error: ErrorIcon,
  info: InfoIcon
};
var CustomizedSnackbar = styles$3.withStyles({
  root: {
    marginRight: "24px"
  }
})(Snackbar);
var useStyles$i = styles$3.makeStyles(function (theme) {
  return {
    success: {
      backgroundColor: colors.green[600]
    },
    error: {
      backgroundColor: theme.palette.error.dark
    },
    info: {
      backgroundColor: theme.palette.primary.main
    },
    warning: {
      backgroundColor: colors.amber[700]
    },
    icon: {
      fontSize: 20
    },
    iconVariant: {
      opacity: 0.9,
      marginRight: theme.spacing(1)
    },
    message: {
      display: "flex",
      alignItems: "center"
    }
  };
});
function DoranToast(props) {
  var classes = useStyles$i();

  var openToast = props.open,
      _onClose = props.onClose,
      className = props.className,
      _props$duration = props.duration,
      duration = _props$duration === void 0 ? 6000 : _props$duration,
      message = props.message,
      variant = props.variant,
      rest = _objectWithoutPropertiesLoose(props, ["open", "onClose", "className", "duration", "message", "variant"]);

  var Icon = variantIcon[variant];
  var attributes = {
    anchorOrigin: {
      vertical: "top",
      horizontal: "right"
    },
    open: openToast,
    autoHideDuration: duration,
    onClose: function onClose(event, _) {
      return _onClose(event);
    }
  };
  return /*#__PURE__*/React__default.createElement(CustomizedSnackbar, attributes, /*#__PURE__*/React__default.createElement(SnackbarContent, _extends({
    className: clsx(classes[variant], className),
    "aria-describedby": "client-snackbar",
    message: /*#__PURE__*/React__default.createElement("span", {
      id: "client-snackbar",
      className: classes.message
    }, /*#__PURE__*/React__default.createElement(Icon, {
      className: clsx(classes.icon, classes.iconVariant)
    }), message),
    action: [/*#__PURE__*/React__default.createElement(IconButton, {
      key: "close",
      "aria-label": "close",
      color: "inherit",
      onClick: function onClick(event) {
        return _onClose(event);
      }
    }, /*#__PURE__*/React__default.createElement(CloseIcon, {
      className: classes.icon
    }))]
  }, rest)));
}
DoranToast.propTypes = {
  className: PropTypes.string,
  onClose: PropTypes.func,
  variant: PropTypes.oneOf(["error", "info", "success", "warning"]).isRequired
};

function showToast(detail) {
  window.EventBus.dispatchEvent("open-toast", detail);
}
function closeToast(detail) {
  window.EventBus.dispatchEvent("close-toast", detail);
}

var StyledTooltip = styles$3.withStyles(function (theme) {
  return {
    tooltip: {
      backgroundColor: "#f5f5f9",
      color: "rgba(0, 0, 0, 0.87)",
      maxWidth: 320,
      fontSize: theme.typography.pxToRem(14),
      border: "1px solid #dadde9"
    }
  };
})(Tooltip);
function DoranHtmlTooltip(props) {
  var label = props.label,
      placement = props.placement,
      children = props.children;
  return /*#__PURE__*/React__default.createElement(StyledTooltip, {
    title: children,
    placement: placement || "left-start"
  }, label);
}

var useTreeItemStyles = styles$3.makeStyles(function (theme) {
  return {
    root: {},
    content: {
      color: theme.palette.text.secondary,
      borderTopRightRadius: theme.spacing(2),
      borderBottomRightRadius: theme.spacing(2),
      paddingRight: theme.spacing(1),
      fontWeight: theme.typography.fontWeightMedium,
      "$expanded > &": {
        fontWeight: theme.typography.fontWeightRegular
      }
    },
    group: {
      marginLeft: 0,
      "& $content": {
        paddingLeft: theme.spacing(2)
      }
    },
    expanded: {},
    selected: {},
    label: {
      fontWeight: "inherit",
      color: "inherit",
      borderRadius: "4px"
    },
    labelRoot: {
      display: "flex",
      alignItems: "center"
    },
    labelIcon: {
      marginRight: theme.spacing(1)
    },
    labelText: {
      fontWeight: "inherit",
      flexGrow: 1
    }
  };
});

function DoranTreeViewItem(props) {
  var classes = useTreeItemStyles();

  var labelText = props.labelText,
      LabelIcon = props.labelIcon,
      color = props.color,
      bgColor = props.bgColor,
      other = _objectWithoutPropertiesLoose(props, ["labelText", "labelIcon", "color", "bgColor"]);

  var operation = props.operation;
  return /*#__PURE__*/React__default.createElement(TreeItem, _extends({
    label: /*#__PURE__*/React__default.createElement("div", {
      className: classes.labelRoot
    }, LabelIcon && /*#__PURE__*/React__default.createElement(LabelIcon, {
      color: "inherit",
      className: classes.labelIcon
    }), /*#__PURE__*/React__default.createElement(Typography, {
      variant: "body2",
      className: classes.labelText
    }, labelText), operation),
    style: {
      "--tree-view-color": color,
      "--tree-view-bg-color": bgColor
    },
    classes: {
      root: classes.root,
      content: classes.content,
      expanded: classes.expanded,
      selected: classes.selected,
      group: classes.group,
      label: classes.label
    }
  }, other));
}

DoranTreeViewItem.propTypes = {
  bgColor: PropTypes.string,
  color: PropTypes.string,
  labelIcon: PropTypes.elementType.isRequired,
  labelInfo: PropTypes.string,
  labelText: PropTypes.oneOfType([PropTypes.string, PropTypes.object]).isRequired
};

var ListItem = function ListItem(value, label, description, disabled) {
  if (description === void 0) {
    description = "";
  }

  if (disabled === void 0) {
    disabled = false;
  }

  this.value = value;
  this.label = label;
  this.description = description;
  this.disabled = disabled;
};

var BirthDateItem = function BirthDateItem(day, month, year) {
  this.day = day;
  this.month = month;
  this.year = year;
};

exports.BirthDateItem = BirthDateItem;
exports.DoranAutoComplete = DoranAutocomplete;
exports.DoranBirthDate = DoranBithDate;
exports.DoranButton = DoranButton;
exports.DoranCheckbox = DoranCheckbox;
exports.DoranConfirmDialog = DoranConfirmDialog;
exports.DoranContact = DoranContact;
exports.DoranDatePicker = DoranDatePicker;
exports.DoranDialogOperationPanel = DoranOperationPanel$1;
exports.DoranEditor = DoranEditor;
exports.DoranFilterPanel = DoranFilterPanel;
exports.DoranForm = DoranForm;
exports.DoranHtmlTooltip = DoranHtmlTooltip;
exports.DoranImageInput = DoranImageInput;
exports.DoranInput = DoranInput;
exports.DoranMap = DoranMap;
exports.DoranMultiSelect = DoranMultiSelect;
exports.DoranMultiSelectAutoComplete = DoranMultiSelectAutocomplete;
exports.DoranMultiTagSelect = DoranMultiTagSelect;
exports.DoranOperationPanel = DoranOperationPanel;
exports.DoranPagination = DoranPagination;
exports.DoranPaginationTable = DoranPaginationTable;
exports.DoranPopover = DoranPopover;
exports.DoranRemoveDialog = DoranRemoveDialog;
exports.DoranSelect = DoranSelect;
exports.DoranSplitButton = DoranSplitButton;
exports.DoranToast = DoranToast;
exports.DoranTreeViewItem = DoranTreeViewItem;
exports.EventBus = EventBus;
exports.ListItem = ListItem;
exports.base64ToFile = base64ToFile;
exports.closeToast = closeToast;
exports.fileToBase64 = fileToBase64;
exports.removeItem = removeItem;
exports.retrieveItem = retrieveItem;
exports.showToast = showToast;
exports.storeItem = storeItem;
exports.toJalali = toJalali;
exports.translateError = translateError;
exports.urlToBase64 = urlToBase64;
exports.urlToBase64Post = urlToBase64Post;
//# sourceMappingURL=index.js.map
